Como a visualização de um diff entre duas versões de um arquivo ajuda você a ver o bug que foi introduzido?

    Te mostra uma visão clara das alterações realizadas nos arquivos, te ajudando ir direto ao ponto que ocrreram as alterações.

Como ter fácil acesso a todo o histórico de um arquivo pode torná-lo um programador mais eficiente no longo prazo?

    O acesso ao histórico facilita ao programador a conhecer e enteder a evolução do código e quais foram as alterações necessárias.

Na sua opinião, quais são os prós e contras de escolher manualmente quando criar um commit, como ocorre no Git, v. o salvamento 
automático de versões, como no Google Docs?

    Manualmente:
     Prós: o histórico não cresce desordenamente e vc tem um controle melhor.
     Contra: corre o risco de perder todo trabalho local.
    
    Automático:
        Prós: minimiza o risco de perder o trabalho.
        Contra: inumeras versões do documento sem necessidade.
        
Por que você acha que alguns sistemas de controle de versão, como o Git, permitem salvar vários arquivos em um commit, 
enquanto outros, como o Google Docs, tratam cada arquivo separadamente?

    Porque outros tratam os arquivos como unitários e o GIT não.

Como usar os comandos git log e git diff para visualizar o histórico dos arquivos?

De que modo o controle de versão pode dar a você mais segurança para fazer alterações que podem danificar algo?    


Agora que você já configurou a sua área de trabalho, você quer usar o Git para quê?

        